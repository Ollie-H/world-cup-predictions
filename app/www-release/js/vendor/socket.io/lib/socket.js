function Socket(e,t){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.open(),this.buffer=[],this.connected=!1,this.disconnected=!0}var parser=require("socket.io-parser"),Emitter=require("emitter"),toArray=require("to-array"),on=require("./on"),bind=require("bind"),debug=require("debug")("socket.io-client:socket"),hasBin=require("has-binary-data"),indexOf=require("indexof");module.exports=exports=Socket;var events={connect:1,disconnect:1,error:1},emit=Emitter.prototype.emit;Emitter(Socket.prototype),Socket.prototype.open=Socket.prototype.connect=function(){if(this.connected)return this;var e=this.io;return e.open(),this.subs=[on(e,"open",bind(this,"onopen")),on(e,"error",bind(this,"onerror")),on(e,"packet",bind(this,"onpacket")),on(e,"close",bind(this,"onclose"))],"open"==this.io.readyState&&this.onopen(),this},Socket.prototype.send=function(){var e=toArray(arguments);return e.unshift("message"),this.emit.apply(this,e),this},Socket.prototype.emit=function(e){if(events.hasOwnProperty(e))return emit.apply(this,arguments),this;var t=toArray(arguments),n=parser.EVENT;hasBin(t)&&(n=parser.BINARY_EVENT);var r={type:n,data:t};return"function"==typeof t[t.length-1]&&(debug("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),r.id=this.ids++),this.packet(r),this},Socket.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},Socket.prototype.onerror=function(e){this.emit("error",e)},Socket.prototype.onopen=function(){debug("transport is open - connecting"),"/"!=this.nsp&&this.packet({type:parser.CONNECT})},Socket.prototype.onclose=function(e){debug("close (%s)",e),this.connected=!1,this.disconnected=!0,this.emit("disconnect",e)},Socket.prototype.onpacket=function(e){if(e.nsp!=this.nsp)return;switch(e.type){case parser.CONNECT:this.onconnect();break;case parser.EVENT:this.onevent(e);break;case parser.BINARY_EVENT:this.onevent(e);break;case parser.ACK:this.onack(e);break;case parser.DISCONNECT:this.ondisconnect();break;case parser.ERROR:this.emit("error",e.data)}},Socket.prototype.onevent=function(e){var t=e.data||[];debug("emitting event %j",t),null!=e.id&&(debug("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?emit.apply(this,t):this.buffer.push(t)},Socket.prototype.ack=function(e){var t=this,n=!1;return function(){if(n)return;n=!0;var r=toArray(arguments);debug("sending ack %j",r),t.packet({type:parser.ACK,id:e,data:r})}},Socket.prototype.onack=function(e){debug("calling ack %s with %j",e.id,e.data);var t=this.acks[e.id];t.apply(this,e.data),delete this.acks[e.id]},Socket.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},Socket.prototype.emitBuffered=function(){for(var e=0;e<this.buffer.length;e++)emit.apply(this,this.buffer[e]);this.buffer=[]},Socket.prototype.ondisconnect=function(){debug("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},Socket.prototype.destroy=function(){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.io.destroy(this)},Socket.prototype.close=Socket.prototype.disconnect=function(){return this.connected?(debug("performing disconnect (%s)",this.nsp),this.packet({type:parser.DISCONNECT}),this.destroy(),this.onclose("io client disconnect"),this):this};